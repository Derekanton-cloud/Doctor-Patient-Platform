<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Doctor Profile | Doctor-Patient Interface</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <style>
        /* Global Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        html,
        body {
            height: 100%;
            width: 100%;
            scroll-behavior: smooth;
            overflow-x: hidden;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #abdded, #92e1e9);
        }

        /* Navbar Styles */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: linear-gradient(135deg, #000000, #1a1a1a);
            color: whitesmoke;
            position: sticky;
            top: 0;
            width: 100%;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .navbar-logo {
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            text-decoration: none;
            color: white;
        }

        .navbar-logo img {
            width: 40px;
            height: auto;
        }

        .navbar-logo h1 {
            font-size: 24px;
            margin: 0;
            transition: color 0.3s ease, text-shadow 0.3s ease;
        }

        .navbar-logo:hover h1 {
            color: #a4d2ff;
            text-shadow: 0 4px 12px rgba(30, 144, 255, 0.7);
        }

        .navbar-links {
            display: flex;
            align-items: center;
            gap: 30px;
        }

        .navbar-links a {
            color: white;
            text-decoration: none;
            font-size: 16px;
            transition: color 0.3s, transform 0.3s;
        }

        .navbar-links a:hover {
            color: #a4d2ff;
            transform: translateY(-2px);
            text-shadow: 0 4px 12px rgba(30, 144, 255, 0.7);
        }

        .navbar-links a.appointment-btn {
            padding: 8px 16px;
            border-radius: 30px;
            transition: all 0.3s;
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.3);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .navbar-links a.appointment-btn:hover {
            background: #047cde;
            color: white;
            border-color: #047cde;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(4, 124, 222, 0.3);
        }

        .navbar-links a.appointment-btn i {
            font-size: 16px;
        }

        /* Profile Dropdown */
        .profile-dropdown {
            position: relative;
            display: inline-block;
        }

        .profile-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            object-fit: cover;
            background-color: #047cde;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .profile-icon:hover {
            transform: scale(1.1);
            box-shadow: 0 0 15px rgba(164, 210, 255, 0.8);
        }

        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            min-width: 180px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            z-index: 1;
            border-radius: 8px;
            overflow: hidden;
            margin-top: 10px;
        }

        .dropdown-content a {
            color: #333;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background 0.3s;
        }

        .dropdown-content a:hover {
            background-color: #f1f1f1;
            color: #047cde;
        }

        .show {
            display: block;
            animation: fadeIn 0.3s;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            margin-right: 2rem;
            height: fit-content;
            position: sticky;
            top: 85px;
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu li {
            margin-bottom: 1rem;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: #333;
            text-decoration: none;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background: linear-gradient(to right, #e6f7ff, #d1e7f5);
            color: #047cde;
        }

        .sidebar-menu a i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        .doctor-profile {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 2rem;
        }

        .doctor-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #047cde;
            margin-bottom: 1rem;
        }

        .doctor-info {
            text-align: center;
        }

        .doctor-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .doctor-specialty {
            color: #666;
            font-size: 0.9rem;
        }

        /* Profile Content */
        .profile-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .profile-header {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .profile-cover {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 180px;
            border-radius: 15px 15px 0 0;
            background: linear-gradient(135deg, #047cde, #00c6ff);
            overflow: hidden;
        }

        .profile-cover::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4z' fill='%23ffffff' fill-opacity='0.15' fill-rule='evenodd'/%3E%3C/svg%3E");
            opacity: 0.8;
        }

        .profile-header-content {
            position: relative;
            padding-top: 100px;
            display: flex;
            align-items: flex-end;
            margin-bottom: 2rem;
        }

        .profile-avatar-large {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            border: 5px solid white;
            object-fit: cover;
            margin-right: 2rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            background-color: #047cde;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 50px;
        }

        .profile-info {
            flex: 1;
        }

        .profile-name {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .profile-specialty {
            font-size: 1.2rem;
            color: #047cde;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .profile-specialty i {
            color: #047cde;
        }

        .profile-meta {
            display: flex;
            gap: 1.5rem;
            color: #666;
            margin-bottom: 1.5rem;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .meta-item i {
            color: #047cde;
        }

        .profile-actions {
            display: flex;
            gap: 1rem;
        }

        .profile-btn {
            padding: 0.8rem 1.5rem;
            border-radius: 30px;
            display: flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s;
            cursor: pointer;
        }

        .primary-btn {
            background: #047cde;
            color: white;
            border: none;
        }

        .primary-btn:hover {
            background: #0366b3;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(4, 124, 222, 0.3);
        }

        .secondary-btn {
            background: transparent;
            color: #047cde;
            border: 1px solid #047cde;
        }

        .secondary-btn:hover {
            background: rgba(4, 124, 222, 0.1);
            transform: translateY(-3px);
        }

        /* Profile Tabs */
        .profile-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-top: 1px solid #e9ecef;
            padding-top: 1rem;
        }

        .profile-tab {
            padding: 0.8rem 1.5rem;
            border-radius: 30px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
            color: #666;
            background: transparent;
        }

        .profile-tab.active {
            background: #047cde;
            color: white;
            box-shadow: 0 5px 15px rgba(4, 124, 222, 0.3);
        }

        .profile-tab:not(.active):hover {
            background: #f8f9fa;
            color: #333;
            transform: translateY(-2px);
        }

        /* Profile Sections */
        .profile-section {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title i {
            color: #047cde;
        }

        /* Personal Info Form */
        .profile-form {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #555;
        }

        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-control:focus {
            border-color: #047cde;
            outline: none;
            box-shadow: 0 0 0 3px rgba(4, 124, 222, 0.1);
        }

        .form-group-full {
            grid-column: 1 / -1;
        }

        textarea.form-control {
            resize: vertical;
            min-height: 100px;
        }

        .form-actions {
            grid-column: 1 / -1;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1rem;
        }

        /* Education and Experience */
        .timeline {
            position: relative;
            padding-left: 2rem;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e9ecef;
        }

        .timeline-item {
            position: relative;
            padding-bottom: 2rem;
        }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -2rem;
            top: 0;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background: #047cde;
            border: 3px solid white;
            box-shadow: 0 0 0 3px rgba(4, 124, 222, 0.3);
        }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .timeline-title {
            font-weight: 600;
            color: #333;
            font-size: 1.1rem;
        }

        .timeline-period {
            color: #047cde;
            font-weight: 500;
        }

        .timeline-subtitle {
            color: #666;
            margin-bottom: 0.5rem;
        }

        .timeline-description {
            color: #777;
            font-size: 0.95rem;
            line-height: 1.5;
        }

        .add-item-btn {
            margin-top: 1rem;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: #047cde;
            background: transparent;
            border: 1px dashed #047cde;
            border-radius: 5px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .add-item-btn:hover {
            background: rgba(4, 124, 222, 0.1);
            transform: translateY(-2px);
        }

        /* Avatar Upload */
        .avatar-upload {
            position: relative;
            cursor: pointer;
        }

        .avatar-upload:hover .avatar-overlay {
            opacity: 1;
        }

        .avatar-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .avatar-upload input[type="file"] {
            display: none;
        }

        /* Availability Section */
        .availability-management-section {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-top: 2rem;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            background-color: #047cde;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #0366b3;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(4, 124, 222, 0.3);
        }

        .availability-tabs {
            display: flex;
            border-bottom: 1px solid #e9ecef;
            margin-bottom: 1.5rem;
        }

        .tab {
            padding: 0.8rem 1.2rem;
            cursor: pointer;
            transition: all 0.3s;
            border-bottom: 2px solid transparent;
            color: #666;
            font-weight: 500;
        }

        .tab.active {
            border-bottom: 2px solid #047cde;
            color: #047cde;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s;
        }

        .time-slots-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
        }

        .time-slot-card {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }

        .time-slot-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-3px);
            border-color: #047cde;
        }

        .slot-day {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .slot-time {
            color: #666;
            margin-bottom: 0.5rem;
        }

        .slot-duration {
            color: #047cde;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .slot-buffer {
            color: #666;
            font-size: 0.8rem;
            margin-bottom: 1rem;
        }

        .slot-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: auto;
        }

        .delete-slot {
            color: #dc3545;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s;
        }

        .delete-slot:hover {
            color: #c82333;
            transform: translateY(-2px);
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
            margin: 0 10px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-switch label {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .toggle-switch label:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        .toggle-switch input:checked+label {
            background-color: #047cde;
        }

        .toggle-switch input:checked+label:before {
            transform: translateX(26px);
        }

        .leave-details {
            margin-top: 1.5rem;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 9999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s;
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 500px;
            animation: slideDown 0.3s;
        }

        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }

        .close-modal:hover {
            color: #333;
        }

        /* Toast notification */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: white;
            color: #333;
            padding: 12px 20px;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            z-index: 9999;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s;
        }

        .toast.success {
            border-left: 4px solid #4CAF50;
        }

        .toast.error {
            border-left: 4px solid #F44336;
        }

        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }

        .toast-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .toast.success .toast-icon {
            background-color: rgba(76, 175, 80, 0.1);
            color: #4CAF50;
        }

        .toast.error .toast-icon {
            background-color: rgba(244, 67, 54, 0.1);
            color: #F44336;
        }

        .toast-message {
            flex: 1;
        }

        .toast-close {
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.3s;
        }

        .toast-close:hover {
            opacity: 1;
        }

        /* Footer Styles */
        .footer {
            background: linear-gradient(135deg, #000000, #1a1a1a);
            color: #fff;
            padding: 30px 0;
            position: relative;
            margin-top: auto;
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 40px;
            padding: 0 20px;
        }

        .footer-section {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .footer-logo {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }

        .footer-logo img {
            width: 40px;
            height: auto;
        }

        .footer-logo h3 {
            font-size: 1.5rem;
            margin: 0;
            color: #fff;
        }

        .footer-section h4 {
            color: #a4d2ff;
            margin-bottom: 20px;
            font-size: 1.2rem;
        }

        .footer-section p {
            margin: 5px 0;
            color: #999;
            line-height: 1.6;
        }

        .footer-section .social-links {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .social-links a {
            color: #fff;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .social-links a:hover {
            color: #a4d2ff;
        }

        .footer-bottom {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .footer-bottom p {
            color: #666;
            font-size: 0.9rem;
        }

        /* Animations */
        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes slideDown {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar">
        <a href="/doctors/dashboard" class="navbar-logo">
            <img src="/assets/logo.png" alt="Logo">
            <h1>Doctor-Patient Interface</h1>
        </a>
        <div class="navbar-links">
            <a href="/doctors/appointments" class="appointment-btn">
                <i class="fas fa-calendar-check"></i> My Appointments
            </a>
            <div class="profile-dropdown">
                <div class="profile-icon" onclick="toggleDropdown()">
                    <% if(user.profileImage) { %>
                        <img src="<%= user.profileImage %>" alt="Profile" class="profile-icon">
                        <% } else { %>
                            <i class="fas fa-user-md" style="color: white;"></i>
                            <% } %>
                </div>
                <div id="dropdown-menu" class="dropdown-content">
                    <a href="/doctors/profile"><i class="fas fa-user-md"></i> My Profile</a>
                    <a href="/doctors/settings"><i class="fas fa-cog"></i> Settings</a>
                    <a href="/auth/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="doctor-profile">
                <% if(user.profileImage) { %>
                    <img src="<%= user.profileImage %>" alt="Doctor" class="doctor-avatar">
                    <% } else { %>
                        <div class="doctor-avatar"
                            style="background-color: #047cde; display: flex; justify-content: center; align-items: center;">
                            <i class="fas fa-user-md" style="color: white; font-size: 36px;"></i>
                        </div>
                        <% } %>
                            <div class="doctor-info">
                                <div class="doctor-name">Dr. <%= user.firstName %>
                                        <%= user.lastName %>
                                </div>
                                <div class="doctor-specialty">
                                    <%= user.specialty %>
                                </div>
                            </div>
            </div>

            <ul class="sidebar-menu">
                <li><a href="/doctors/dashboard"><i class="fas fa-columns"></i> Dashboard</a></li>
                <li><a href="/doctors/appointments"><i class="fas fa-calendar-check"></i> My Appointments</a></li>
                <li><a href="/doctors/patients"><i class="fas fa-users"></i> My Patients</a></li>
                <li><a href="/doctors/prescriptions"><i class="fas fa-file-prescription"></i> Prescriptions</a></li>
                <li><a href="/doctors/medicalrecords"><i class="fas fa-notes-medical"></i> Medical Records</a></li>
                <li><a href="/doctors/communications"><i class="fas fa-comment-medical"></i> Communications</a></li>
                <li><a href="/doctors/analytics"><i class="fas fa-chart-line"></i> Analytics</a></li>
                <li><a href="/doctors/profile" class="active"><i class="fas fa-user-md"></i> Profile</a></li>
                <li><a href="/doctors/settings"><i class="fas fa-cog"></i> Settings</a></li>
            </ul>
        </aside>

        <!-- Profile Content -->
        <main class="profile-content">
            <!-- Profile Header -->
            <section class="profile-header">
                <div class="profile-cover"></div>
                <div class="profile-header-content">
                    <label class="avatar-upload" for="profile-image">
                        <% if(user.profileImage) { %>
                            <img src="<%= user.profileImage %>" alt="Doctor" class="profile-avatar-large">
                            <% } else { %>
                                <div class="profile-avatar-large">
                                    <i class="fas fa-user-md"></i>
                                </div>
                                <% } %>
                                    <div class="avatar-overlay">
                                        <i class="fas fa-camera"></i>
                                    </div>
                                    <input type="file" id="profile-image" accept="image/*">
                    </label>
                    <div class="profile-info">
                        <h1 class="profile-name">Dr. <%= user.firstName %>
                                <%= user.lastName %>
                        </h1>
                        <div class="profile-specialty">
                            <i class="fas fa-stethoscope"></i>
                            <span>
                                <%= user.specialty %>
                            </span>
                        </div>
                        <div class="profile-meta">
                            <div class="meta-item">
                                <i class="fas fa-envelope"></i>
                                <span>
                                    <%= user.email %>
                                </span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-phone"></i>
                                <span>
                                    <%= user.phone || 'Not set' %>
                                </span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>
                                    <%= user.address || 'Not set' %>
                                </span>
                            </div>
                        </div>
                        <div class="profile-actions">
                            <button class="profile-btn primary-btn" id="edit-profile-btn">
                                <i class="fas fa-edit"></i> Edit Profile
                            </button>
                            <button class="profile-btn secondary-btn">
                                <i class="fas fa-eye"></i> View Public Profile
                            </button>
                        </div>
                    </div>
                </div>
                <div class="profile-tabs">
                    <div class="profile-tab active" data-tab="personal">Personal Information</div>
                    <div class="profile-tab" data-tab="education">Education & Experience</div>
                    <div class="profile-tab" data-tab="availability">Availability</div>
                </div>
            </section>

            <!-- Personal Information Section -->
            <section class="profile-section" id="personal-tab">
                <h2 class="section-title"><i class="fas fa-user"></i> Personal Information</h2>
                <form class="profile-form" id="profile-form">
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <input type="text" id="firstName" name="firstName" class="form-control"
                            value="<%= user.firstName %>" required>
                    </div>
                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <input type="text" id="lastName" name="lastName" class="form-control"
                            value="<%= user.lastName %>" required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <input type="email" id="email" name="email" class="form-control" value="<%= user.email %>"
                            readonly>
                    </div>
                    <div class="form-group">
                        <label for="phone">Phone Number</label>
                        <input type="tel" id="phone" name="phone" class="form-control" value="<%= user.phone || '' %>">
                    </div>
                    <div class="form-group">
                        <label for="specialty">Specialty</label>
                        <select id="specialty" name="specialty" class="form-control" required>
                            <option value="Cardiologist" <%=user.specialty==='Cardiologist' ? 'selected' : '' %>
                                >Cardiologist</option>
                            <option value="Dermatologist" <%=user.specialty==='Dermatologist' ? 'selected' : '' %>
                                >Dermatologist</option>
                            <option value="Endocrinologist" <%=user.specialty==='Endocrinologist' ? 'selected' : '' %>
                                >Endocrinologist</option>
                            <option value="Gastroenterologist" <%=user.specialty==='Gastroenterologist' ? 'selected'
                                : '' %>>Gastroenterologist</option>
                            <option value="General Physician" <%=user.specialty==='General Physician' ? 'selected' : ''
                                %>>General Physician</option>
                            <option value="Neurologist" <%=user.specialty==='Neurologist' ? 'selected' : '' %>
                                >Neurologist</option>
                            <option value="Obstetrician/Gynecologist" <%=user.specialty==='Obstetrician/Gynecologist'
                                ? 'selected' : '' %>>Obstetrician/Gynecologist</option>
                            <option value="Oncologist" <%=user.specialty==='Oncologist' ? 'selected' : '' %>>Oncologist
                            </option>
                            <option value="Ophthalmologist" <%=user.specialty==='Ophthalmologist' ? 'selected' : '' %>
                                >Ophthalmologist</option>
                            <option value="Orthopedic Surgeon" <%=user.specialty==='Orthopedic Surgeon' ? 'selected'
                                : '' %>>Orthopedic Surgeon</option>
                            <option value="Pediatrician" <%=user.specialty==='Pediatrician' ? 'selected' : '' %>
                                >Pediatrician</option>
                            <option value="Psychiatrist" <%=user.specialty==='Psychiatrist' ? 'selected' : '' %>
                                >Psychiatrist</option>
                            <option value="Urologist" <%=user.specialty==='Urologist' ? 'selected' : '' %>>Urologist
                            </option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" name="experience" class="form-control"
                            value="<%= user.experience || '' %>" min="0">
                    </div>
                    <div class="form-group-full">
                        <label for="address">Address</label>
                        <input type="text" id="address" name="address" class="form-control"
                            value="<%= user.address || '' %>">
                    </div>
                    <div class="form-group-full">
                        <label for="bio">Biography</label>
                        <textarea id="bio" name="bio" class="form-control" rows="5"><%= user.bio || '' %></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="profile-btn secondary-btn" id="cancel-btn">Cancel</button>
                        <button type="submit" class="profile-btn primary-btn">Save Changes</button>
                    </div>
                </form>
            </section>

            <!-- Education & Experience Section -->
            <section class="profile-section" id="education-tab" style="display: none;">
                <h2 class="section-title"><i class="fas fa-graduation-cap"></i> Education</h2>
                <div class="timeline" id="education-timeline">
                    <% if (user.education && user.education.length> 0) { %>
                        <% user.education.forEach((edu, index)=> { %>
                            <div class="timeline-item" data-id="<%= index %>">
                                <div class="timeline-header">
                                    <h3 class="timeline-title">
                                        <%= edu.degree %>
                                    </h3>
                                    <span class="timeline-period">
                                        <%= edu.startYear %> - <%= edu.endYear %>
                                    </span>
                                </div>
                                <div class="timeline-subtitle">
                                    <%= edu.institution %>
                                </div>
                                <p class="timeline-description">
                                    <%= edu.description || '' %>
                                </p>
                            </div>
                            <% }) %>
                                <% } else { %>
                                    <p>No education information has been added yet.</p>
                                    <% } %>
                </div>
                <button class="add-item-btn" id="add-education">
                    <i class="fas fa-plus"></i> Add Education
                </button>

                <h2 class="section-title" style="margin-top: 2rem;"><i class="fas fa-briefcase"></i> Work Experience
                </h2>
                <div class="timeline" id="experience-timeline">
                    <% if (user.workExperience && user.workExperience.length> 0) { %>
                        <% user.workExperience.forEach((exp, index)=> { %>
                            <div class="timeline-item" data-id="<%= index %>">
                                <div class="timeline-header">
                                    <h3 class="timeline-title">
                                        <%= exp.position %>
                                    </h3>
                                    <span class="timeline-period">
                                        <%= exp.startYear %> - <%= exp.endYear || 'Present' %>
                                    </span>
                                </div>
                                <div class="timeline-subtitle">
                                    <%= exp.institution %>
                                </div>
                                <p class="timeline-description">
                                    <%= exp.description || '' %>
                                </p>
                            </div>
                            <% }) %>
                                <% } else { %>
                                    <p>No work experience has been added yet.</p>
                                    <% } %>
                </div>
                <button class="add-item-btn" id="add-experience">
                    <i class="fas fa-plus"></i> Add Work Experience
                </button>
            </section>

            <!-- Availability Section -->
            <section class="profile-section" id="availability-tab" style="display: none;">
                <h2 class="section-title"><i class="fas fa-clock"></i> Manage Your Availability</h2>
                <p class="section-description" style="margin-bottom: 2rem;">
                    Set your weekly schedule and manage your availability for patient appointments. Patients will only
                    be able to book appointments during your available time slots.
                </p>

                <div class="availability-management-section">
                    <div class="section-header">
                        <h3 class="section-title">Manage Your Availability</h3>
                        <button id="addSlotBtn" class="btn-primary">
                            <i class="fas fa-plus"></i> Add Time Slot
                        </button>
                    </div>

                    <div class="availability-tabs">
                        <div class="tab active" data-tab="time-slots">Time Slots</div>
                        <div class="tab" data-tab="leave-management">Leave Management</div>
                    </div>

                    <div class="tab-content active" id="time-slots-content">
                        <div class="time-slots-container">
                            <div class="no-slots-message" style="display: none;">
                                <p>You haven't set any availability slots yet. Add your first slot using the button
                                    above.</p>
                            </div>

                            <div class="time-slots-list">
                                <!-- Time slots will be populated here via JavaScript -->
                            </div>
                        </div>
                    </div>

                    <div class="tab-content" id="leave-management-content">
                        <div class="leave-form">
                            <div class="form-group">
                                <label for="isOnLeave">Leave Status:</label>
                                <div class="toggle-switch">
                                    <input type="checkbox" id="isOnLeave" name="isOnLeave">
                                    <label for="isOnLeave"></label>
                                </div>
                                <span id="leaveStatusText">Not on leave</span>
                            </div>

                            <div class="leave-details" style="display: none;">
                                <div class="form-group">
                                    <label for="leaveStartDate">Leave Start Date:</label>
                                    <input type="date" id="leaveStartDate" name="leaveStartDate" class="form-control">
                                </div>

                                <div class="form-group">
                                    <label for="leaveEndDate">Leave End Date:</label>
                                    <input type="date" id="leaveEndDate" name="leaveEndDate" class="form-control">
                                </div>

                                <div class="form-group">
                                    <label for="leaveReason">Reason for Leave:</label>
                                    <textarea id="leaveReason" name="leaveReason" class="form-control"
                                        rows="3"></textarea>
                                </div>

                                <button id="updateLeaveBtn" class="btn-primary">Update Leave Status</button>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- Add Time Slot Modal -->
    <div id="addSlotModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3>Add New Time Slot</h3>
            <form id="addSlotForm">
                <div class="form-group">
                    <label for="slotDate">Date:</label>
                    <input type="date" id="slotDate" name="slotDate" class="form-control" required>
                </div>

                <div class="form-group">
                    <label for="day">Day of the Week:</label>
                    <input type="text" id="day" name="day" class="form-control" readonly>
                </div>

                <div class="form-group">
                    <label for="startTime">Start Time:</label>
                    <input type="time" id="startTime" name="startTime" class="form-control" required>
                </div>

                <div class="form-group">
                    <label for="slotDuration">Appointment Duration (minutes):</label>
                    <input type="number" id="slotDuration" name="slotDuration" class="form-control" value="30" min="15"
                        step="5" required>
                </div>

                <div class="form-group">
                    <label for="endTime">End Time:</label>
                    <input type="time" id="endTime" name="endTime" class="form-control" readonly>
                </div>

                <button type="submit" class="btn-primary">Add Time Slot</button>
            </form>
        </div>
    </div>

    <!-- Education Modal -->
    <div id="educationModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3>Add Education</h3>
            <form id="educationForm">
                <input type="hidden" id="edu-id" name="id" value="">
                <div class="form-group">
                    <label for="degree">Degree / Certification:</label>
                    <input type="text" id="degree" name="degree" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="institution">Institution:</label>
                    <input type="text" id="institution" name="institution" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="startYear">Start Year:</label>
                    <input type="number" id="startYear" name="startYear" class="form-control" required min="1950"
                        max="2025">
                </div>
                <div class="form-group">
                    <label for="endYear">End Year:</label>
                    <input type="number" id="endYear" name="endYear" class="form-control" required min="1950"
                        max="2025">
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea id="description" name="description" class="form-control" rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="profile-btn secondary-btn" id="edu-cancel">Cancel</button>
                    <button type="submit" class="profile-btn primary-btn">Save</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Experience Modal -->
    <div id="experienceModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3>Add Work Experience</h3>
            <form id="experienceForm">
                <input type="hidden" id="exp-id" name="id" value="">
                <div class="form-group">
                    <label for="position">Position:</label>
                    <input type="text" id="position" name="position" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="exp-institution">Institution:</label>
                    <input type="text" id="exp-institution" name="institution" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="exp-startYear">Start Year:</label>
                    <input type="number" id="exp-startYear" name="startYear" class="form-control" required min="1950"
                        max="2025">
                </div>
                <div class="form-group">
                    <label for="exp-endYear">End Year (leave blank if current):</label>
                    <input type="number" id="exp-endYear" name="endYear" class="form-control" min="1950" max="2025">
                </div>
                <div class="form-group">
                    <label for="exp-description">Description:</label>
                    <textarea id="exp-description" name="description" class="form-control" rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="profile-btn secondary-btn" id="exp-cancel">Cancel</button>
                    <button type="submit" class="profile-btn primary-btn">Save</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <div class="toast-icon">
            <i class="fas fa-check"></i>
        </div>
        <div class="toast-message">Profile updated successfully</div>
        <div class="toast-close">
            <i class="fas fa-times"></i>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <div class="footer-section">
                <div class="footer-logo">
                    <img src="/assets/logo.png" alt="Logo">
                    <h3>Doctor-Patient Interface</h3>
                </div>
                <p>Revolutionizing healthcare through seamless connectivity and innovative technology.</p>
            </div>

            <div class="footer-section">
                <h4>Contact Us</h4>
                <p>Email: doctorpatientinterface@gmail.com</p>
                <p>Phone: 9901527481</p>
                <p>Address: Shavige Malleshwara Hills, 91st Main Rd, Bengaluru, Karnataka 560078</p>
            </div>

            <div class="footer-section">
                <h4>Quick Links</h4>
                <p><a href="/doctors/dashboard" style="color: #999; text-decoration: none;">Dashboard</a></p>
                <p><a href="/doctors/appointments" style="color: #999; text-decoration: none;">My Appointments</a></p>
                <p><a href="/doctors/patients" style="color: #999; text-decoration: none;">My Patients</a></p>
                <p><a href="/doctors/prescriptions" style="color: #999; text-decoration: none;">Prescriptions</a></p>
                <p><a href="/doctors/medicalrecords" style="color: #999; text-decoration: none;">Medical Records</a></p>
                <p><a href="/doctors/profile" style="color: #999; text-decoration: none;">Profile</a></p>
                <div class="social-links">
                    <a href="#"><i class="fab fa-facebook"></i></a>
                    <a href="#"><i class="fab fa-twitter"></i></a>
                    <a href="#"><i class="fab fa-linkedin"></i></a>
                    <a href="#"><i class="fab fa-instagram"></i></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 Doctor-Patient Interface. All Rights Reserved.</p>
            <p>Developed By Team DPI</p>
        </div>
    </footer>

    <!-- JavaScript for Profile Page -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Toggle dropdown menu
            window.toggleDropdown = function () {
                document.getElementById("dropdown-menu").classList.toggle("show");
            }

            // Close dropdown when clicking outside
            window.onclick = function (event) {
                if (!event.target.matches('.profile-icon')) {
                    const dropdowns = document.getElementsByClassName("dropdown-content");
                    for (let i = 0; i < dropdowns.length; i++) {
                        const openDropdown = dropdowns[i];
                        if (openDropdown.classList.contains('show')) {
                            openDropdown.classList.remove('show');
                        }
                    }
                }

                // Close modals when clicking outside
                if (event.target === document.getElementById('addSlotModal')) {
                    document.getElementById('addSlotModal').style.display = 'none';
                }
                if (event.target === document.getElementById('educationModal')) {
                    document.getElementById('educationModal').style.display = 'none';
                }
                if (event.target === document.getElementById('experienceModal')) {
                    document.getElementById('experienceModal').style.display = 'none';
                }
            }

            // Tab switching for profile
            const profileTabs = document.querySelectorAll('.profile-tab');
            profileTabs.forEach(tab => {
                tab.addEventListener('click', function () {
                    // Remove active class from all tabs
                    profileTabs.forEach(t => t.classList.remove('active'));
                    // Add active class to clicked tab
                    this.classList.add('active');

                    // Show the corresponding tab content
                    const tabType = this.dataset.tab;
                    document.querySelectorAll('.profile-section').forEach(section => {
                        section.style.display = 'none';
                });
                document.getElementById(`${tabType}-tab`).style.display = 'block';
                });
            });

            // Profile form submission
            const profileForm = document.getElementById('profile-form');
            profileForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = {
                    firstName: document.getElementById('firstName').value,
                    lastName: document.getElementById('lastName').value,
                    specialty: document.getElementById('specialty').value,
                    experience: document.getElementById('experience').value,
                    phone: document.getElementById('phone').value,
                    address: document.getElementById('address').value,
                    bio: document.getElementById('bio').value
                };

                try {
                    const response = await fetch('/api/doctors/profile', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    const data = await response.json();

                    if (data.success) {
                        showToast('Profile updated successfully', 'success');
                    } else {
                        showToast(data.message || 'Failed to update profile', 'error');
                    }
                } catch (error) {
                    console.error('Error updating profile:', error);
                    showToast('Network error while updating profile', 'error');
                }
            });

            // Profile image upload
            const profileImageInput = document.getElementById('profile-image');
            profileImageInput.addEventListener('change', async function (e) {
                const file = e.target.files[0];
                if (!file) return;

                if (!file.type.match('image.*')) {
                    showToast('Please select an image file', 'error');
                    return;
                }

                const formData = new FormData();
                formData.append('profileImage', file);

                try {
                    const response = await fetch('/api/doctors/profile/image', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Update image in UI
                        const profileAvatars = document.querySelectorAll('.profile-avatar-large, .doctor-avatar, .profile-icon');
                        profileAvatars.forEach(avatar => {
                            if (avatar.tagName === 'IMG') {
                                avatar.src = data.imageUrl;
                            } else {
                                // For div with icon, replace with img
                                const img = document.createElement('img');
                                img.src = data.imageUrl;
                                img.alt = 'Profile';
                                img.className = avatar.className;
                                avatar.parentNode.replaceChild(img, avatar);
                            }
                        });

                        showToast('Profile image updated successfully', 'success');
                    } else {
                        showToast(data.message || 'Failed to update profile image', 'error');
                    }
                } catch (error) {
                    console.error('Error updating profile image:', error);
                    showToast('Network error while updating profile image', 'error');
                }
            });

            // Education and Experience Modals
            const educationModal = document.getElementById('educationModal');
            const experienceModal = document.getElementById('experienceModal');
            const addEducationBtn = document.getElementById('add-education');
            const addExperienceBtn = document.getElementById('add-experience');

            addEducationBtn.addEventListener('click', function () {
                document.getElementById('educationForm').reset();
                document.getElementById('edu-id').value = '';
                educationModal.style.display = 'block';
            });

            addExperienceBtn.addEventListener('click', function () {
                document.getElementById('experienceForm').reset();
                document.getElementById('exp-id').value = '';
                experienceModal.style.display = 'block';
            });

            // Close modals
            document.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', function () {
                    this.closest('.modal').style.display = 'none';
                });
            });

            document.getElementById('edu-cancel').addEventListener('click', function () {
                educationModal.style.display = 'none';
            });

            document.getElementById('exp-cancel').addEventListener('click', function () {
                experienceModal.style.display = 'none';
            });

            // Submit education form
            document.getElementById('educationForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = {
                    id: document.getElementById('edu-id').value,
                    degree: document.getElementById('degree').value,
                    institution: document.getElementById('institution').value,
                    startYear: document.getElementById('startYear').value,
                    endYear: document.getElementById('endYear').value,
                    description: document.getElementById('description').value
                };

                try {
                    const response = await fetch('/api/doctors/education', {
                        method: formData.id ? 'PUT' : 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    const data = await response.json();

                    if (data.success) {
                        educationModal.style.display = 'none';
                        window.location.reload(); // Reload to update UI
                        showToast(`Education ${formData.id ? 'updated' : 'added'} successfully`, 'success');
                    } else {
                        showToast(data.message || `Failed to ${formData.id ? 'update' : 'add'} education`, 'error');
                    }
                } catch (error) {
                    console.error('Error with education:', error);
                    showToast(`Network error while ${formData.id ? 'updating' : 'adding'} education`, 'error');
                }
            });

            // Submit experience form
            document.getElementById('experienceForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = {
                    id: document.getElementById('exp-id').value,
                    position: document.getElementById('position').value,
                    institution: document.getElementById('exp-institution').value,
                    startYear: document.getElementById('exp-startYear').value,
                    endYear: document.getElementById('exp-endYear').value || null,
                    description: document.getElementById('exp-description').value
                };

                try {
                    const response = await fetch('/api/doctors/experience', {
                        method: formData.id ? 'PUT' : 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    const data = await response.json();

                    if (data.success) {
                        experienceModal.style.display = 'none';
                        window.location.reload(); // Reload to update UI
                        showToast(`Experience ${formData.id ? 'updated' : 'added'} successfully`, 'success');
                    } else {
                        showToast(data.message || `Failed to ${formData.id ? 'update' : 'add'} experience`, 'error');
                    }
                } catch (error) {
                    console.error('Error with experience:', error);
                    showToast(`Network error while ${formData.id ? 'updating' : 'adding'} experience`, 'error');
                }
            });

            // Toast notification
            const toast = document.getElementById('toast');
            const toastClose = document.querySelector('.toast-close');

            toastClose.addEventListener('click', function () {
                toast.classList.remove('show');
            });

            function showToast(message, type = 'success') {
                const toastMessage = document.querySelector('.toast-message');
                const toastIcon = document.querySelector('.toast-icon i');

                toastMessage.textContent = message;
                toast.className = 'toast ' + type;

                if (type === 'success') {
                    toastIcon.className = 'fas fa-check';
                } else {
                    toastIcon.className = 'fas fa-exclamation-circle';
                }

                toast.classList.add('show');

                // Hide toast after 5 seconds
                setTimeout(() => {
                    toast.classList.remove('show');
                }, 5000);
            }

            // Availability management functions
            // Tab switching for availability
            const availabilityTabs = document.querySelectorAll('.availability-tabs .tab');
            availabilityTabs.forEach(tab => {
                tab.addEventListener('click', function () {
                    // Remove active class from all tabs
                    document.querySelectorAll('.availability-tabs .tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

                    // Add active class to clicked tab
                    this.classList.add('active');

                    // Show corresponding content
                    const tabContent = document.getElementById(`${this.dataset.tab}-content`);
                    tabContent.classList.add('active');
                });
            });

            // Modal functionality for adding time slots
            const modal = document.getElementById('addSlotModal');
            const openModalBtn = document.getElementById('addSlotBtn');
            const closeModalBtn = document.querySelector('.close-modal');

            openModalBtn.addEventListener('click', function () {
                modal.style.display = 'block';
            });

            closeModalBtn.addEventListener('click', function () {
                modal.style.display = 'none';
            });

            // Fix the day calculation and improve time slot submission
            const slotDateInput = document.getElementById('slotDate');
            const dayInput = document.getElementById('day');
            const startTimeInput = document.getElementById('startTime');
            const slotDurationInput = document.getElementById('slotDuration');
            const endTimeInput = document.getElementById('endTime');

            // Calculate day of week when date is selected
            slotDateInput.addEventListener('change', function() {
                if (this.value) {
                    const date = new Date(this.value);
                    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                    dayInput.value = daysOfWeek[date.getDay()];
                    console.log('Day set to:', dayInput.value); // Debug log
                } else {
                    dayInput.value = '';
                }
            });
            
            function calculateEndTime() {
                const startTime = startTimeInput.value;
                const duration = parseInt(slotDurationInput.value, 10);

                if (startTime && !isNaN(duration)) {
                    const [hours, minutes] = startTime.split(':').map(Number);
                    const totalMinutes = hours * 60 + minutes + duration;
                    const endHours = Math.floor(totalMinutes / 60) % 24;
                    const endMinutes = totalMinutes % 60;
                    endTimeInput.value = `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
                    console.log('End time calculated:', endTimeInput.value); // Debug log
                } else {
                    endTimeInput.value = '';
                }
            }

            startTimeInput.addEventListener('input', calculateEndTime);
            slotDurationInput.addEventListener('input', calculateEndTime);

            // Add time slot form submission
            const addSlotForm = document.getElementById('addSlotForm');
            addSlotForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Form submitted'); // Debug log

                if (!slotDateInput.value) {
                    showToast('Please select a date', 'error');
                    return;
                }

                if (!dayInput.value) {
                    const date = new Date(slotDateInput.value);
                    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                    dayInput.value = daysOfWeek[date.getDay()];
                }

                if (!startTimeInput.value) {
                    showToast('Please select a start time', 'error');
                    return;
                }

                if (!endTimeInput.value) {
                    calculateEndTime(); // Calculate end time if not already done
                }

                // Prepare the data
                const formData = {
                    date: slotDateInput.value,
                    day: dayInput.value,
                    startTime: startTimeInput.value,
                    endTime: endTimeInput.value,
                    slotDuration: slotDurationInput.value,
                    bufferTime: 15 // Default buffer time set to 15 minutes
                };

                console.log('Sending data:', formData); // Debug log

                try {
                    const response = await fetch('/api/availability/add-slot', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    console.log('Response status:', response.status); // Debug log
                    
                    const data = await response.json();
                    console.log('Response data:', data); // Debug log

                    if (data.success) {
                        // Close modal and refresh data
                        document.getElementById('addSlotModal').style.display = 'none';
                        document.getElementById('addSlotForm').reset();
                        fetchDoctorAvailability();
                        showToast('Time slot added successfully', 'success');
                    } else {
                        showToast(data.message || 'Failed to add time slot', 'error');
                    }
                } catch (error) {
                    console.error('Error adding time slot:', error);
                    showToast('Network error while adding time slot. Check console for details.', 'error');
                }
            });

            // Function to fetch doctor's availability
            async function fetchDoctorAvailability() {
                try {
                    const response = await fetch('/api/availability/my-availability', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        displayAvailability(data.data);
                    } else {
                        showToast('Failed to load availability data', 'error');
                    }
                } catch (error) {
                    console.error('Error fetching availability:', error);
                    showToast('Network error while loading availability data', 'error');
                }
            }

            // Function to display availability data
            function displayAvailability(availability) {
                console.log('Displaying availability:', availability); // Debug log
                const timeSlotsContainer = document.querySelector('.time-slots-list');
                const noSlotsMessage = document.querySelector('.no-slots-message');

                if (availability.availableSlots && availability.availableSlots.length > 0) {
                    timeSlotsContainer.innerHTML = ''; // Clear existing slots
                    noSlotsMessage.style.display = 'none';

                    availability.availableSlots.forEach(slot => {
                        const slotCard = document.createElement('div');
                        slotCard.className = 'time-slot-card';
                        slotCard.innerHTML = `
                            <div class="slot-day">${slot.day} (${slot.date})</div>
                            <div class="slot-time">${slot.startTime} - ${slot.endTime}</div>
                            <div class="slot-duration">${slot.slotDuration} minute appointments</div>
                            <div class="slot-buffer">Buffer Time: 15 minutes</div>
                            <div class="slot-actions">
                                <button class="delete-slot" data-id="${slot._id}">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        `;
                        timeSlotsContainer.appendChild(slotCard);
                    });

                    // Add delete event listeners
                    document.querySelectorAll('.delete-slot').forEach(btn => {
                        btn.addEventListener('click', function () {
                            deleteTimeSlot(this.dataset.id);
                        });
                    });
                } else {
                    timeSlotsContainer.innerHTML = '';
                    noSlotsMessage.style.display = 'block';
                }

                // Handle leave status
                const isOnLeaveCheckbox = document.getElementById('isOnLeave');
                const leaveDetails = document.querySelector('.leave-details');
                const leaveStatusText = document.getElementById('leaveStatusText');

                isOnLeaveCheckbox.checked = availability.isOnLeave;

                if (availability.isOnLeave) {
                    leaveDetails.style.display = 'block';
                    leaveStatusText.textContent = 'On leave';

                    if (availability.leaveStartDate) {
                        document.getElementById('leaveStartDate').value = new Date(availability.leaveStartDate).toISOString().split('T')[0];
                    }

                    if (availability.leaveEndDate) {
                        document.getElementById('leaveEndDate').value = new Date(availability.leaveEndDate).toISOString().split('T')[0];
                    }

                    document.getElementById('leaveReason').value = availability.leaveReason || '';
                } else {
                    leaveDetails.style.display = 'none';
                    leaveStatusText.textContent = 'Not on leave';
                }
            }

            // Function to delete a time slot
            async function deleteTimeSlot(slotId) {
                if (!confirm('Are you sure you want to delete this time slot?')) {
                    return;
                }

                try {
                    const response = await fetch(`/api/availability/delete-slot/${slotId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        fetchDoctorAvailability();
                        showToast('Time slot deleted successfully', 'success');
                    } else {
                        showToast(data.message || 'Failed to delete time slot', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting time slot:', error);
                    showToast('Network error while deleting time slot', 'error');
                }
            }

            // Function to update leave status
            async function updateLeaveStatus(leaveData) {
                try {
                    const response = await fetch('/api/availability/leave-status', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(leaveData)
                    });

                    const data = await response.json();

                    if (data.success) {
                        fetchDoctorAvailability(); // Refresh availability data
                        showToast('Leave status updated successfully', 'success');
                    } else {
                        showToast(data.message || 'Failed to update leave status', 'error');
                    }
                } catch (error) {
                    console.error('Error updating leave status:', error);
                    showToast('Network error while updating leave status', 'error');
                }
            }

            // Initialize availability data
            fetchDoctorAvailability();
        });

        // REMOVE THESE DUPLICATE FUNCTIONS
        // Don't define functions outside the DOMContentLoaded event handler
        // Delete or comment out all these duplicate functions:
        /*
        async function fetchDoctorAvailability() { ... }
        function displayAvailability(availability) { ... }
        async function addTimeSlot(slotData) { ... }
        async function deleteTimeSlot(slotId) { ... }
        async function updateLeaveStatus(leaveData) { ... }
        */
    </script>
</body>

</html>